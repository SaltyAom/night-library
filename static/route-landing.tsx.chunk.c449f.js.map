{"version":3,"sources":["webpack:///./routes/landing.tsx"],"names":["Landing","username","useStoreon","useState","localBorrowed","updateBorrow","id","class","href","useSWR","graphqlRequest","books","data","error","borrowed","onClick","window","location","reload","Array","fill","map","_","index","key","preload","borrowedIdList","returnBook","graphqlBase","borrowedList","success","console","log","book","isBorrowed","length","includes","style","opacity","action","disabled"],"mappings":"uZAoIeA,UArHC,WAAM,IACZC,EAAaC,YAAiC,YAA9CD,SADY,EAGkBE,YAAmB,IAAlDC,EAHa,KAGEC,EAHF,KAKlB,IAAKJ,EACD,OACI,uBAASK,GAAG,YAAYC,MAAM,UAC1B,kBAAIA,MAAM,SAAV,iBACA,iBAAGA,MAAM,UAAT,0DAGA,YAAC,IAAD,CAAMC,KAAK,WACP,iBAAGD,MAAM,UAAT,YAbE,MAkBWE,YACzB,CACI,WADJ,+MAaAC,KAdQC,EAlBM,EAkBZC,KAAaC,EAlBD,EAkBCA,MAlBD,EAmC6BJ,YAC3C,CACI,eADJ,oIAUAC,KAXQI,EAnCM,EAmCZF,KAcN,GAAIC,GAjDc,EAmCIA,MAelB,OACI,uBAASP,GAAG,YAAYC,MAAM,UAC1B,kBAAIA,MAAM,SAAV,mBACA,iBAAGA,MAAM,UAAT,mDAGA,sBAAQA,MAAM,SAASQ,QAAS,kBAAMC,OAAOC,SAASC,WAAtD,UAMZ,IAAKP,IAAUG,EACX,OACI,uBAASR,GAAG,aACR,kBAAIC,MAAM,UAAV,aACCY,MAAM,GACFC,KAAK,MACLC,KAAI,SAACC,EAAGC,GAAJ,OACD,YAAC,IAAD,CAAaC,IAAKD,EAAOE,SAAO,QAKpD,IAAIC,EAAiBZ,EAASO,KAAI,qBAAGf,MAEjCqB,EAAa,SAAOrB,GAAP,0CACyB,uBAAMsB,YACxC,cADmD,kDAG1BtB,EAH0B,yFAAjB,MAQrC,gBAED,OAVYuB,GAQX,EARqC,GAAhCjB,KAQL,EARyBkB,SAY1BzB,EAAawB,GAJZ,KAEoB,EAAAE,QAAQC,IAAI,yBAFhC,+BAOL,OACI,uBAAS1B,GAAG,aACR,kBAAIC,MAAM,UAAV,aACCI,EAAMU,KAAI,SAACY,GACR,IAAIC,KACAR,EAAeS,SAAU/B,EAAc+B,UACjCT,EAAeU,SAASH,EAAK3B,KAC7BF,EAAcgC,SAASH,EAAK3B,KAGtC,OACI,YAAC,IAAD,GACIkB,IAAKS,EAAK3B,IACN,CAAE2B,QAFV,CAGII,MAAOH,EAAa,CAAEI,QAAS,IAAQ,GACvCC,OAAQL,EAAa,WAAa,SAClCnB,QAASY,EACTa,SAAUN","file":"route-landing.tsx.chunk.c449f.js","sourcesContent":["import { h } from 'preact'\nimport { useState } from 'preact/hooks'\n\nimport { useStoreon } from 'storeon/preact'\nimport { UserStore, UserEvent } from '../stores/types'\n\nimport useSWR from 'swr'\nimport graphqlRequest, { graphqlBase } from '../libs/graphql'\n\nimport BookDisplay from '../component/book'\nimport { Book } from '../component/book/types'\n\nimport '../styles/landing.styl'\nimport { Link } from 'wouter/preact'\n\nconst Landing = () => {\n    let { username } = useStoreon<UserStore, UserEvent>('username')\n\n    let [localBorrowed, updateBorrow] = useState<string[]>([])\n\n    if (!username)\n        return (\n            <section id=\"book-list\" class=\"-error\">\n                <h3 class=\"title\">Night Library</h3>\n                <p class=\"detail\">\n                    Online library management system written in Actix Web.\n                </p>\n                <Link href=\"/signin\">\n                    <a class=\"action\">Signin</a>\n                </Link>\n            </section>\n        )\n\n    let { data: books, error } = useSWR(\n        [\n            'listBook',\n            `{\n              listBook {\n                data {\n                  id,\n                  title,\n                  author,\n                  price\n                }\n              }\n            }`\n        ],\n        graphqlRequest\n    )\n\n    let { data: borrowed, error: borrowedError } = useSWR(\n        [\n            'listBorrowed',\n            `{\n              listBorrowed {\n                data {\n                  id\n                }\n              }\n            }`\n        ],\n        graphqlRequest\n    )\n\n    if (error || borrowedError)\n        return (\n            <section id=\"book-list\" class=\"-error\">\n                <h3 class=\"title\">Failed to fetch</h3>\n                <p class=\"detail\">\n                    There is a problem requesting an list of books.\n                </p>\n                <button class=\"action\" onClick={() => window.location.reload()}>\n                    Retry\n                </button>\n            </section>\n        )\n\n    if (!books || !borrowed)\n        return (\n            <section id=\"book-list\">\n                <h1 class=\"header\">Book List</h1>\n                {Array(8)\n                    .fill(null)\n                    .map((_, index) => (\n                        <BookDisplay key={index} preload />\n                    ))}\n            </section>\n        )\n\n    let borrowedIdList = borrowed.map(({ id }: { id: string }) => id)\n\n    let returnBook = async (id: string) => {\n        let { data: borrowedList, success } = await graphqlBase(\n            'borrowBooks',\n            `mutation {\n              borrowBooks(books: [\"${id}\"]) {\n                data\n                success\n              }\n            }`\n        )\n\n        if (!success) return console.log('Something went wrong')\n\n        updateBorrow(borrowedList)\n    }\n\n    return (\n        <section id=\"book-list\">\n            <h1 class=\"header\">Book List</h1>\n            {books.map((book: Book) => {\n                let isBorrowed =\n                    borrowedIdList.length || localBorrowed.length\n                        ? borrowedIdList.includes(book.id) ||\n                          localBorrowed.includes(book.id)\n                        : false\n\n                return (\n                    <BookDisplay\n                        key={book.id}\n                        {...{ book }}\n                        style={isBorrowed ? { opacity: 0.5 } : {}}\n                        action={isBorrowed ? 'Borrowed' : 'Borrow'}\n                        onClick={returnBook}\n                        disabled={isBorrowed}\n                    />\n                )\n            })}\n        </section>\n    )\n}\n\nexport default Landing\n"],"sourceRoot":""}