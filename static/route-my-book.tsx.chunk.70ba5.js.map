{"version":3,"sources":["webpack:///./routes/my-book.tsx"],"names":["MyBook","useStoreon","username","initial","useSWR","graphqlRequest","books","data","error","useState","returned","updateReturned","returnBook","id","graphqlBase","success","console","log","class","onClick","window","location","reload","Array","fill","map","_","index","key","preload","hiddenPrice","length","filter","book","includes","action","href"],"mappings":"uZA+GeA,UAhGA,WAAM,MACWC,YACxB,WACA,WAFEC,EADW,EACXA,SAAUC,EADC,EACDA,QADC,EAMYC,YACzB,CACI,eADJ,mNAaAC,KAdQC,EANK,EAMXC,KAAaC,EANF,EAMEA,MANF,EAuBgBC,YAAmB,IAA/CC,EAvBY,KAuBFC,EAvBE,KAyBbC,EAAa,SAAOC,GAAP,kCACK,uBAAMC,YACpB,cAD+B,kDAGND,EAHM,mEAAjB,MAOjB,gBAED,OATkB,EAAZE,SAWNJ,EAAe,GAAD,OAAKD,EAAL,CAAeG,KAJ5B,KAEoB,EAAAG,QAAQC,IAAI,yBAFhC,+BAOL,OAAIT,EAEI,uBAASK,GAAG,YAAYK,MAAM,UAC1B,kBAAIA,MAAM,SAAV,mBACA,iBAAGA,MAAM,UAAT,mDAGA,sBAAQA,MAAM,SAASC,QAAS,kBAAMC,OAAOC,SAASC,WAAtD,WAMPhB,GAASH,EAEN,uBAASU,GAAG,aACR,kBAAIK,MAAM,UAAV,WACCK,MAAM,GACFC,KAAK,MACLC,KAAI,SAACC,EAAGC,GAAJ,OACD,YAAC,IAAD,CAAaC,IAAKD,EAAOE,SAAO,EAACC,aAAW,QAK3D5B,EAEAI,EAAMyB,QAAUzB,EAAMyB,SAAWrB,EAASqB,OAY3C,uBAASlB,GAAG,aACR,kBAAIK,MAAM,UAAV,WACCZ,EACI0B,QAAO,SAACC,GAAD,OAAiBvB,EAASwB,SAASD,EAAKpB,OAC/CY,KAAI,SAACQ,GAAD,OACD,YAAC,IAAD,GACIL,IAAKK,EAAKpB,IACN,CAAEoB,QAFV,CAGIH,aAAW,EACXX,QAASP,EACTuB,OAAO,gBApBnB,uBAAStB,GAAG,YAAYK,MAAM,UAC1B,kBAAIA,MAAM,SAAV,aACA,iBAAGA,MAAM,UAAT,+BACA,YAAC,IAAD,CAAMkB,KAAK,KACP,sBAAQlB,MAAM,mBAAd,sBARM,YAAC,IAAD,CAAUkB,KAAK","file":"route-my-book.tsx.chunk.70ba5.js","sourcesContent":["import { h } from 'preact'\nimport { useState } from 'preact/hooks'\n\nimport { Link, Redirect } from 'wouter/preact'\n\nimport useSWR from 'swr'\nimport graphqlRequest, { graphqlBase } from '../libs/graphql'\n\nimport BookDisplay from '../component/book'\nimport { Book } from '../component/book/types'\n\nimport '../styles/landing.styl'\nimport { useStoreon } from 'storeon/preact'\nimport { UserStore, UserEvent } from '../stores/types'\n\nconst MyBook = () => {\n    let { username, initial } = useStoreon<UserStore, UserEvent>(\n        'username',\n        'initial'\n    )\n\n    let { data: books, error } = useSWR(\n        [\n            'listBorrowed',\n            `{\n              listBorrowed {\n                data {\n                  id,\n                  title,\n                  author,\n                  price\n                }\n              }\n            }`\n        ],\n        graphqlRequest\n    )\n\n    let [returned, updateReturned] = useState<String[]>([])\n\n    let returnBook = async (id: string) => {\n        let { success } = await graphqlBase(\n            'returnBooks',\n            `mutation {\n              returnBooks(books: [\"${id}\"]) {\n                success\n              }\n            }`\n        )\n\n        if (!success) return console.log('Something went wrong')\n\n        updateReturned([...returned, id])\n    }\n\n    if (error)\n        return (\n            <section id=\"book-list\" class=\"-error\">\n                <h3 class=\"title\">Failed to fetch</h3>\n                <p class=\"detail\">\n                    There is a problem requesting an list of books.\n                </p>\n                <button class=\"action\" onClick={() => window.location.reload()}>\n                    Retry\n                </button>\n            </section>\n        )\n\n    if (!books || initial)\n        return (\n            <section id=\"book-list\">\n                <h1 class=\"header\">My Book</h1>\n                {Array(8)\n                    .fill(null)\n                    .map((_, index) => (\n                        <BookDisplay key={index} preload hiddenPrice />\n                    ))}\n            </section>\n        )\n\n    if (!username) return <Redirect href=\"/signin\" />\n\n    if (!books.length || books.length === returned.length)\n        return (\n            <section id=\"book-list\" class=\"-error\">\n                <h3 class=\"title\">No Borrow</h3>\n                <p class=\"detail\">No book have been borrowed.</p>\n                <Link href=\"/\">\n                    <button class=\"action -compact\">Borrow some book</button>\n                </Link>\n            </section>\n        )\n\n    return (\n        <section id=\"book-list\">\n            <h1 class=\"header\">My Book</h1>\n            {books\n                .filter((book: Book) => !returned.includes(book.id))\n                .map((book: Book) => (\n                    <BookDisplay\n                        key={book.id}\n                        {...{ book }}\n                        hiddenPrice\n                        onClick={returnBook}\n                        action=\"Return\"\n                    />\n                ))}\n        </section>\n    )\n}\n\nexport default MyBook\n"],"sourceRoot":""}