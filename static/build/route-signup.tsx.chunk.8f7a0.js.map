{"version":3,"sources":["webpack:///./routes/signup.tsx"],"names":["Signin","useState","error","updateError","useReducer","redirect","allowRedirect","username","useRef","password","confirmPassword","useEffect","fetch","method","credentials","then","res","text","updateUsername","useCallback","event","current","currentTarget","value","updatePassword","updateConfirmPassword","login","response","preventDefault","headers","body","URLSearchParams","data","json","success","info","id","action","onSubmit","class","for","name","type","placeholder","onInput","onChange","href"],"mappings":"6GAAA,yDAqHeA,UA9GA,WAAM,MACUC,YAAS,IAA/BC,EADY,KACLC,EADK,OAEeC,aAAW,WAAC,OAAI,KAAM,GAAjDC,EAFY,KAEFC,EAFE,KAIbC,EAAWC,YAAO,IAClBC,EAAWD,YAAO,IAClBE,EAAkBF,YAAO,IAE7BG,aAAU,WACNC,MAAM,+BAAgC,CAClCC,OAAQ,OACRC,YAAa,YAEhBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACCA,GACCV,EAAc,QAEvB,IAEH,IAAIY,EAAiBC,aAAY,SAACC,GAC1Bb,EAASc,QAAUD,EAAME,cAAcC,QACxC,IACHC,EAAiBL,aAAY,SAACC,GAC1BX,EAASY,QAAUD,EAAME,cAAcC,QACxC,IACHE,EAAwBN,aAAY,SAACC,GACjCV,EAAgBW,QAAUD,EAAME,cAAcC,QAC/C,IAEHG,EAAQP,aAAY,SAAOC,GAAP,sCAShBO,EANJ,OAFAP,EAAMQ,iBAEDrB,EAASc,SAAYZ,EAASY,QAG/BZ,EAASY,UAAYX,EAAgBW,QAC9B,EAAAlB,EAAY,2BAER,gBAAMS,MAAM,4BAA6B,CACpDC,OAAQ,OACRgB,QAAS,CACT,eACI,mDAEJf,YAAa,UACbgB,KAAM,IAAIC,gBAAgB,CACtBxB,SAAUA,EAASc,QACnBZ,SAAUA,EAASY,YAExBN,MAAK,SAAAiB,GAAI,OAAIA,EAAKC,WAXN,MAWa,uBAXxBN,EAAW,GAaHO,SAA6B,sBAAlBP,EAASQ,KAC5B7B,EAAc,GAEdH,EAAYwB,EAASQ,MALG,+BAhBjB,EAAAhC,EAAY,8CAsBxB,IAEH,OACI,oBACIiC,GAAG,QACHC,OAAO,4BACPxB,OAAO,OACPyB,SAAUZ,GAEV,kBAAIa,MAAM,SAAV,UACA,qBAAOA,MAAM,QAAQC,IAAI,YAAzB,YAGA,qBACID,MAAM,iBACNE,KAAK,WACLC,KAAK,OACLC,YAAY,WACZC,QAAS1B,IAEb,qBAAOqB,MAAM,QAAQC,IAAI,YAAzB,YAGA,qBACID,MAAM,iBACNE,KAAK,WACLC,KAAK,WACLC,YAAY,WACZE,SAAUrB,IAEd,qBAAOe,MAAM,QAAQC,IAAI,oBAAzB,oBAGA,qBACID,MAAM,yBACNE,KAAK,mBACLC,KAAK,WACLC,YAAY,mBACZE,SAAUpB,IAEbvB,GAAS,iBAAGqC,MAAM,mBAAmBrC,GACtC,uBAASqC,MAAM,UACX,sBAAQA,MAAM,SAAd,UACA,YAAC,IAAD,CAAMO,KAAK,WACP,iBAAGP,MAAM,QAAT,YAGNlC,GACE,YAAC,IAAD,CAAUyC,KAAK","file":"route-signup.tsx.chunk.8f7a0.js","sourcesContent":["import { h } from 'preact'\nimport { useState, useRef, useReducer, useCallback, useEffect } from 'preact/hooks'\n\nimport { Link, Redirect } from 'wouter/preact'\n\nimport '../styles/sign.styl'\n\nconst Signin = () => {\n    let [error, updateError] = useState(''),\n        [redirect, allowRedirect] = useReducer(_ => true, false)\n\n    let username = useRef(''),\n        password = useRef(''),\n        confirmPassword = useRef('')\n\n    useEffect(() => {\n        fetch('http://localhost/api/refresh', {\n            method: 'POST',\n            credentials: 'include'\n        })\n        .then(res => res.text())\n        .then(res => {\n            if(res)\n                allowRedirect(1)\n        })\n    }, [])\n\n    let updateUsername = useCallback((event: any) => {\n            username.current = event.currentTarget.value\n        }, []),\n        updatePassword = useCallback((event: any) => {\n            password.current = event.currentTarget.value\n        }, []),\n        updateConfirmPassword = useCallback((event: any) => {\n            confirmPassword.current = event.currentTarget.value\n        }, [])\n\n    let login = useCallback(async (event: Event) => {\n        event.preventDefault()\n\n        if (!username.current || !password.current)\n            return updateError(\"Username and Password can't be blank\")\n\n        if (password.current !== confirmPassword.current)\n            return updateError(\"Password doesn't match\")\n\n        let response = await fetch('http://localhost/register', {\n            method: 'POST',\n            headers: {\n            'Content-Type':\n                'application/x-www-form-urlencoded;charset=UTF-8'\n            },\n            credentials: 'include',\n            body: new URLSearchParams({\n                username: username.current,\n                password: password.current\n            })\n        }).then(data => data.json())\n\n        if(response.success || response.info === \"Already signin in\")\n            allowRedirect(1)\n        else\n            updateError(response.info)\n    }, [])\n    \n    return (\n        <form\n            id=\"login\"\n            action=\"http://localhost/register\"\n            method=\"POST\"\n            onSubmit={login}\n        >\n            <h1 class=\"title\">Signin</h1>\n            <label class=\"label\" for=\"username\">\n                Username\n            </label>\n            <input\n                class=\"input username\"\n                name=\"username\"\n                type=\"text\"\n                placeholder=\"Username\"\n                onInput={updateUsername}\n            />\n            <label class=\"label\" for=\"password\">\n                Password\n            </label>\n            <input\n                class=\"input password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={updatePassword}\n            />\n            <label class=\"label\" for=\"confirm-password\">\n                Confirm Password\n            </label>\n            <input\n                class=\"input confirm-password\"\n                name=\"confirm-password\"\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n                onChange={updateConfirmPassword}\n            />\n            {error && <p class=\"warning -hidden\">{error}</p>}\n            <section class=\"action\">\n                <button class=\"login\">Signup</button>\n                <Link href=\"/signin\">\n                    <a class=\"link\">Signin</a>\n                </Link>\n            </section>\n            { redirect &&\n                <Redirect href=\"/\" />\n            }\n        </form>\n    )\n}\n\nexport default Signin\n"],"sourceRoot":""}